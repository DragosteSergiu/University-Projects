%{ 	 
#include <math.h> 
#include <stdio.h>
#include "y.tab.h"
int lines = 1;
%} 
%option noyywrap
%option noinput

DIGIT 		[0-9]
LETTER 		[a-zA-z]
CHAR      	[']([a-zA-Z0-9])['] 
NUMBER   	[-+]?[1-9][0-9]*|0
CONSTANT    {NUMBER}|{WORD}
IDENTIFIER 	[a-z][a-zA-Z0-9_]* 

%% 

"PROGRAM"	{printf ("Keyword :  %s\n", yytext); return PROGRAM;};
"BEGINN" 	{printf ("Keyword :  %s\n", yytext); return BEGINN;};
"END" 		{printf ("Keyword :  %s\n", yytext); return END;};
"VAR"       {printf ("Keyword :  %s\n", yytext); return VAR;};
"INTEGER"   {printf ("Keyword :  %s\n", yytext); return INTEGER;};
"CHAR"      {printf ("Keyword :  %s\n", yytext); return CHAR;};
"ARRAY"     {printf ("Keyword :  %s\n", yytext); return ARRAY;};
"WHILE"		{printf ("Keyword :  %s\n", yytext); return WHILE;};
"DO"        {printf ("Keyword :  %s\n", yytext); return DO;};
"READ"		{printf ("Keyword :  %s\n", yytext); return READ;};
"WRITE"		{printf ("Keyword :  %s\n", yytext); return WRITE;};
"OF"        {printf ("Keyword :  %s\n", yytext); return OF;};
"IF"		{printf ("Keyword :  %s\n", yytext); return IF;};
"THEN"      {printf ("Keyword :  %s\n", yytext); return THEN;};
"ELSE"		{printf ("Keyword :  %s\n", yytext); return ELSE;};

"+" 		{printf ("Operator :  %s\n", yytext); return PLUS;};
"-"			{printf ("Operator :  %s\n", yytext); return MINUS;};
"*"         {printf ("Operator :  %s\n", yytext); return MULTIPLY;};
"/"         {printf ("Operator :  %s\n", yytext); return DIVISION;};
"==" 		{printf ("Operator :  %s\n", yytext); return EQUAL;};
">="        {printf ("Operator :  %s\n", yytext); return GREATER_OR_EQUAL_THAN;};
"!="        {printf ("Operator :  %s\n", yytext); return DIFFERENT;};
"<="        {printf ("Operator :  %s\n", yytext); return LESS_OR_EQUAL_THAN;};
">"         {printf ("Operator :  %s\n", yytext); return GREATER_THAN;};
"<"         {printf ("Operator :  %s\n", yytext); return LESS_THAN;};

"("			{printf ("Separator :  %s\n", yytext); return LEFT_ROUND_PARENTHESIS;};
")"         {printf ("Separator :  %s\n", yytext); return RIGHT_ROUND_PARENTHESIS;};
"["         {printf ("Separator :  %s\n", yytext); return LEFT_SQUARE_PARENTHESIS;};
"]"         {printf ("Separator :  %s\n", yytext); return RIGHT_SQUARE_PARENTHESIS;};
":"         {printf ("Separator :  %s\n", yytext); return COLON;};
":="        {printf ("Separator :  %s\n", yytext); return ASSIGNMENT;};
"," 		{printf ("Separator :  %s\n", yytext); return COMA;};
";"         {printf ("Separator :  %s\n", yytext); return SEMI_COLON;};



{NUMBER}	{printf("An integer: %s (%d)\n", yytext, atoi(yytext));};

{CHAR} 		{printf ("A char :  %s/n", yytext); return CHAR;};

{IDENTIFIER} 		{printf( "An identifier: %s\n", yytext ); return IDENTIFIER;}; 


[ \t]+ 		

[\n]+ {lines++;}

[+-]?0[0-9]* {printf("Illegal integer at line: %d\n", lines); return -1;};

[0-9][a-zA-Z_]* {printf("Illegal identifier at line %d\n", lines); return -1;};

([+-]?0[0-9]*|[0-9]+[a-zA-Z_]*) {printf("Illegal constant at line %d\n", lines); return -1;};

%% 