- Alphabet:
	1. Upper case letters (A-Z) and lower case letters (a-z) of the English alphabet
	2. Decimal digits (0-9)
	3. Underline character '_'
  
- Lexic:
	1. Special symbols which represent:
		a. operators: + - * / > < = <> :=
		b. separators: [] {} : ; space
		c. reserved words: program begin end read write while do integer char record array var
	2. Identifiers:
		identifier := letter | letter {_} {letter}{digit}
		letter := "a"|"b"|...|"z"|"A"|"B"|...|"Z"
		digit := "0"|"1"|...|"9"
	3. Constants:
		integer - definition:
			numericConstant := "+" nonZeroNumber | "-" nonZeroNumber | zero | nonZeroNumber
			nonZeroNumber := nonZeroDigit {zero}{number}
			digit := "0"|"1"|...|"9"
			zero := "0"
			nonZeroDigit := "1"|"2"|...|"9"
		character - definition:
			characterConstant := 'letter' | 'digit'
			letter := "a"|"b"|...|"z"|"A"|"B"|...|"Z"
			digit := "0"|"1"|...|"9"
		record - definition:
			recordConstant := "{" numericConstant | characterConstant {recordConstant} "}"
			
			numericConstant := "+" nonZeroNumber | "-" nonZeroNumber | zero | nonZeroNumber
			nonZeroNumber := nonZeroDigit {zero}{number}
			digit := "0"|"1"|...|"9"
			zero := "0"
			nonZeroDigit := "1"|"2"|...|"9"

			
			characterConstant := 'letter' | 'digit'
			letter := "a"|"b"|...|"z"|"A"|"B"|...|"Z"
			digit := "0"|"1"|...|"9"	
			
-List of all tokens corresponding to the minilanguage (tokens are specified between " and "):
	- "program"
	- "begin"
	- "end"
	- "var"
	- "integer"
	- "char"
	- "record"
	- "array"
	- "while"
	- "do"
	- "read"
	- "write"
	- "+"
	- "-"
	- "*"
	- "/"
	- ">"
	- "<"
	- "="
	- "<>"
	- ":="
	- "[]"
	- "{}"
	- ":"
	- ";"
	- " "
	- "of"
	
-Syntax:
	Rules of the mini-language:
		program := "VAR" declarationList; compoundStatement "."
		declarationList := declaration | declaration ";" declarationList
		declaration := identifier ":" type
		type := nonArrayType | arrayDeclaration
		nonArrayType := 'integer' | 'char' | 'record'
		arrayDeclaration := "ARRAY" "[number]" "OF" nonArrayType  
		compoundStatement := "BEGIN" statementList "END"
		statementList := statement | statement ";" statementList
		statement := assignStatement | ioStatement | ifStatement | whileStatement
		assignStatement := identifier ":=" expression
		expression := numericExpression
		numericExpression := numericExpression numericOperator numericTerm | numericTerm
		numericOperator := "+" | "-" | "*" | "/"
		numericTerm := constant | identifier
		ioStatement := "READ" "("identifier")" | "WRITE" "("identifier")" 
		ifStatement := "IF" condition "THEN" compoundStatement ["ELSE" compoundStatement]
		whileStatement := "WHILE" condition "DO" compoundStatement
		condition := expression relation expression
		relation := "<" | "<=" | "=" | "<>" | ">=" | ">"